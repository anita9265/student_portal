#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { Server } = require("socket.io"); 
var app = require("../app");
var debug = require("debug")("studentresult-api:server");
var http = require("http");
// const { Server } = require("socket.io");
const mongoose = require("mongoose");

mongoose
  .connect("mongodb://localhost/authDB")
  .then(() => console.log("Connected!"));

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3030");
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

// const io = new Server(server);
// const io = new Server(server, {
//   cors: {
//     origin: "http://localhost:3000",
//   },
// });


// Store online users by socket id
// let users = {};

// Socket.IO handling

// io.on("connection", (socket) => {
//   console.log("âœ… Socket connected:", socket.id);

//   socket.on("register", (name) => {
//     socket.name = name;
//     console.log("ðŸ‘¤\ User registered:", name);
//   });

//   socket.on("send_message", (data) => {
//     console.log(" Message received on server:", data);
//     io.emit("receive_message", data); // send to all
//   });

//   socket.on("disconnect", () => {
//     console.log(" Disconnected:", socket.name || socket.id);
//   });
// });



const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000", // React origin
    methods: ["GET", "POST"],
  },
});

let users = {};

io.on("connection", (socket) => {
  console.log("Socket connected:", socket.id);

  socket.on("register", (name) => {
    users[name] = socket.id;
    console.log("Registered:", name, users);
  });

  socket.on("send_message", (data) => {
    console.log("Server received:", data);
    const receiverSocket = users[data.receiver];
    if (receiverSocket) {
      io.to(receiverSocket).emit("receive_message", data);
    }
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
